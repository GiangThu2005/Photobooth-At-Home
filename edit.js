// üì∏ L·∫•y canvas v√† context ƒë·ªÉ v·∫Ω
const canvas = document.getElementById("editCanvas");
const ctx = canvas.getContext("2d");

// üé® C√°c bi·∫øn qu·∫£n l√Ω giao di·ªán
let currentFrame = new Image();             // Khung n·ªÅn (c√≥ th·ªÉ thay ƒë·ªïi)
let currentStickers = [];                   // Sticker ƒëang d√°n
let backgroundColor = "white";              // M√†u n·ªÅn m·∫∑c ƒë·ªãnh
let captured = JSON.parse(localStorage.getItem("capturedPhotos")) || []; // ·∫¢nh ƒë√£ ch·ª•p
let originalImages = [...captured];          // B·∫£n sao d·ªØ li·ªáu g·ªëc
const photoPositions = [121, 616, 1116];     // V·ªã tr√≠ 3 ·∫£nh tr√™n canvas
let photoCanvases = [];                      // Canvas con cho t·ª´ng ·∫£nh
let photoStates = [];                        // L∆∞u tr·∫°ng th√°i g·ªëc c·ªßa ·∫£nh

// üöÄ Kh·ªüi t·∫°o canvas t·ª´ng ·∫£nh
function initPhotoCanvases(callback) {
  photoCanvases = [];
  photoStates = [];
  let loaded = 0;

  for (let i = 0; i < captured.length; i++) {
    const img = new Image();
    img.onload = () => {
      const c = document.createElement("canvas");
      c.width = 577;
      c.height = 434;
      const context = c.getContext("2d");
      context.drawImage(img, 0, 0, 577, 434);
      photoCanvases[i] = c;
      photoStates[i] = {
        originalData: context.getImageData(0, 0, 577, 434)
      };
      loaded++;
      if (loaded === captured.length && callback) callback();
    };
    img.src = captured[i];
  }
}

// ‚úèÔ∏è V·∫Ω to√†n b·ªô canvas
function drawAll() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.fillStyle = backgroundColor;
  ctx.fillRect(0, 0, canvas.width, canvas.height);

  // V·∫Ω frame n·ªÅn n·∫øu c√≥
  if (currentFrame.complete && currentFrame.src) {
    ctx.drawImage(currentFrame, 0, 0, 700, 2000);
  }

  // V·∫Ω t·ª´ng ·∫£nh
  for (let i = 0; i < photoCanvases.length; i++) {
    if (photoCanvases[i]) {
      ctx.drawImage(photoCanvases[i], 70, photoPositions[i], 577, 434);
    }
  }

  // V·∫Ω sticker (n·∫øu c√≥)
  currentStickers.forEach(stk => {
    ctx.drawImage(stk.img, stk.x, stk.y, stk.w, stk.h);
  });
}

// üé® ƒê·ªïi m√†u n·ªÅn
function changeBackground(color) {
  backgroundColor = color;
  currentFrame.src = "";
  drawAll();
}

// üé® ƒê·ªïi frame n·ªÅn
function changeFrame(src) {
  currentFrame.src = src;
  currentFrame.onload = drawAll;
}

// üñºÔ∏è Th√™m sticker
function addSticker(src) {
  const img = new Image();
  img.onload = () => {
    currentStickers = [{ img, x: 0, y: 0, w: 700, h: 2000 }];
    drawAll();
  };
  img.src = src;
}

// üîÑ Reset filter v·ªÅ ·∫£nh g·ªëc cho ·∫£nh ƒëang ch·ªçn
function resetFilterOfSelected() {
  const selectedIndex = parseInt(document.getElementById("photoSelect").value);
  const ctxPhoto = photoCanvases[selectedIndex].getContext("2d");
  ctxPhoto.putImageData(photoStates[selectedIndex].originalData, 0, 0);
  drawAll();
}

// üéûÔ∏è Filter tr·∫Øng ƒëen
function applyGrayscaleToSelected() {
  const selectedIndex = parseInt(document.getElementById("photoSelect").value);
  resetFilterOfSelected();
  const ctxPhoto = photoCanvases[selectedIndex].getContext("2d");
  const imageData = ctxPhoto.getImageData(0, 0, 577, 434);

  for (let i = 0; i < imageData.data.length; i += 4) {
    const avg = (imageData.data[i] + imageData.data[i+1] + imageData.data[i+2]) / 3;
    imageData.data[i] = avg;
    imageData.data[i+1] = avg;
    imageData.data[i+2] = avg;
  }
  ctxPhoto.putImageData(imageData, 0, 0);
  drawAll();
}

// üí° Filter tƒÉng s√°ng
function adjustBrightnessToSelected(value) {
  const selectedIndex = parseInt(document.getElementById("photoSelect").value);
  resetFilterOfSelected();
  const ctxPhoto = photoCanvases[selectedIndex].getContext("2d");
  const imageData = ctxPhoto.getImageData(0, 0, 577, 434);

  for (let i = 0; i < imageData.data.length; i += 4) {
    imageData.data[i] += value;
    imageData.data[i+1] += value;
    imageData.data[i+2] += value;
  }
  ctxPhoto.putImageData(imageData, 0, 0);
  drawAll();
}

// üåë Filter l√†m t·ªëi
function applyDarkenToSelected() {
  const selectedIndex = parseInt(document.getElementById("photoSelect").value);
  resetFilterOfSelected();
  const ctxPhoto = photoCanvases[selectedIndex].getContext("2d");
  const imageData = ctxPhoto.getImageData(0, 0, 577, 434);

  for (let i = 0; i < imageData.data.length; i += 4) {
    imageData.data[i] -= 30;
    imageData.data[i+1] -= 30;
    imageData.data[i+2] -= 30;
  }
  ctxPhoto.putImageData(imageData, 0, 0);
  drawAll();
}

// ‚ùÑÔ∏è Filter t√¥ng l·∫°nh
function applyCoolToneToSelected() {
  const selectedIndex = parseInt(document.getElementById("photoSelect").value);
  resetFilterOfSelected();
  const ctxPhoto = photoCanvases[selectedIndex].getContext("2d");
  const imageData = ctxPhoto.getImageData(0, 0, 577, 434);

  for (let i = 0; i < imageData.data.length; i += 4) {
    imageData.data[i] -= 20;     // Gi·∫£m ƒë·ªè
    imageData.data[i+2] += 20;   // TƒÉng xanh
  }
  ctxPhoto.putImageData(imageData, 0, 0);
  drawAll();
}

// üî• Filter t√¥ng ·∫•m
function applyWarmToneToSelected() {
  const selectedIndex = parseInt(document.getElementById("photoSelect").value);
  resetFilterOfSelected();
  const ctxPhoto = photoCanvases[selectedIndex].getContext("2d");
  const imageData = ctxPhoto.getImageData(0, 0, 577, 434);

  for (let i = 0; i < imageData.data.length; i += 4) {
    imageData.data[i] += 20;     // TƒÉng ƒë·ªè
    imageData.data[i+2] -= 20;   // Gi·∫£m xanh
  }
  ctxPhoto.putImageData(imageData, 0, 0);
  drawAll();
}

// üßπ Reset to√†n b·ªô canvas v·ªÅ ban ƒë·∫ßu
function resetCanvas() {
  captured = [...originalImages];
  currentFrame.src = "";
  currentStickers = [];
  backgroundColor = "white";
  initPhotoCanvases(drawAll);
}

// üíæ T·∫£i canvas v·ªÅ d∆∞·ªõi d·∫°ng ·∫£nh PNG
function downloadImage() {
  const link = document.createElement("a");
  link.download = "edited_photobooth.png";
  link.href = canvas.toDataURL();
  link.click();
}

// üöÄ Khi trang t·∫£i xong, kh·ªüi t·∫°o canvas
window.onload = () => {
  initPhotoCanvases(drawAll);
};
