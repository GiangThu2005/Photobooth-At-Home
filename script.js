// L·∫•y c√°c ph·∫ßn t·ª≠ HTML c·∫ßn d√πng
const video = document.getElementById('video');           // video hi·ªÉn th·ªã webcam
const capture = document.getElementById('capture');       // n√∫t b·∫Øt ƒë·∫ßu ch·ª•p
const countdownOverlay = document.getElementById("countdownOverlay"); // overlay hi·ªán s·ªë ƒë·∫øm
const countdownSelect = document.getElementById("countdown");         // dropdown ch·ªçn th·ªùi gian ƒë·∫øm

// M·∫£ng l∆∞u c√°c canvas ·∫£nh ƒë√£ ch·ª•p
const capturedImages = [];

// B·∫≠t webcam v√† hi·ªÉn th·ªã tr√™n video
navigator.mediaDevices.getUserMedia({ video: true })
  .then(stream => {
    video.srcObject = stream;
  })
  .catch(err => {
    console.error("Kh√¥ng th·ªÉ truy c·∫≠p webcam:", err);
  });

// B·∫Øt ƒë·∫ßu ch·ª•p ·∫£nh t·ª± ƒë·ªông sau khi nh·∫•n n√∫t
function startAutoCapture() {
  const count = parseInt(countdownSelect.value); // l·∫•y th·ªùi gian ƒë·∫øm ng∆∞·ª£c t·ª´ dropdown

  function countdownAndCapture() {
    if (capturedImages.length >= 3) return;

    let currentCount = count;
    countdownOverlay.classList.remove("hidden");
    countdownOverlay.textContent = currentCount;

    const interval = setInterval(() => {
      currentCount--;

      if (currentCount >= 0) {
        countdownOverlay.textContent = currentCount;
      }

      if (currentCount === 0) {
        clearInterval(interval);

        setTimeout(() => {
          countdownOverlay.classList.add("hidden");

          // L·∫•y k√≠ch th∆∞·ªõc g·ªëc c·ªßa video
          const videoWidth = video.videoWidth;
          const videoHeight = video.videoHeight;

          // T·∫°o canvas t·∫°m c√πng t·ª∑ l·ªá video
          const tempCanvas = document.createElement('canvas');
          tempCanvas.width = videoWidth;
          tempCanvas.height = videoHeight;
          const tempCtx = tempCanvas.getContext('2d');

          // L·∫≠t ngang
          tempCtx.translate(videoWidth, 0);
          tempCtx.scale(-1, 1);

          tempCtx.drawImage(video, 0, 0, videoWidth, videoHeight);

          // üñºÔ∏è Ti·∫øp theo: Resize canvas v·ªÅ t·ª∑ l·ªá 4:3 chu·∫©n 577x434
          const finalCanvas = document.createElement('canvas');
          finalCanvas.width = 577;
          finalCanvas.height = 434;
          const finalCtx = finalCanvas.getContext('2d');

          // T√≠nh t·ªâ l·ªá scale
          const scale = Math.min(videoWidth / 577, videoHeight / 434);

          // C·∫Øt v√πng gi·ªØa video cho ƒë·∫πp
          const cropWidth = 577 * scale;
          const cropHeight = 434 * scale;
          const cropX = (videoWidth - cropWidth) / 2;
          const cropY = (videoHeight - cropHeight) / 2;

          // V·∫Ω ph·∫ßn crop l√™n final canvas
          finalCtx.drawImage(
            tempCanvas,
            cropX, cropY, cropWidth, cropHeight,
            0, 0, 577, 434
          );

          // L∆∞u final canvas v√†o m·∫£ng
          capturedImages.push(finalCanvas);

          // Hi·ªÉn th·ªã preview
          const previewCanvas = document.getElementById(`preview${capturedImages.length}`);
          if (previewCanvas) {
            previewCanvas.classList.remove("hidden");
            const ctx = previewCanvas.getContext('2d');
            ctx.clearRect(0, 0, previewCanvas.width, previewCanvas.height);
            ctx.drawImage(finalCanvas, 0, 0, previewCanvas.width, previewCanvas.height);
          }

          // N·∫øu ch∆∞a ƒë·ªß 3 ·∫£nh, ti·∫øp t·ª•c
          if (capturedImages.length < 3) {
            countdownAndCapture();
          } else {
            // ƒê·ªß 3 ·∫£nh -> l∆∞u v√† chuy·ªÉn trang
            const imageData = capturedImages.map(canvas => canvas.toDataURL());
            localStorage.setItem("capturedPhotos", JSON.stringify(imageData));
            window.location.href = "edit.html";
          }
        }, 500);
      }
    }, 1000);
  }

  countdownAndCapture();
}

// Khi click n√∫t, b·∫Øt ƒë·∫ßu quy tr√¨nh ch·ª•p
capture.addEventListener("click", startAutoCapture);
